{"version":3,"sources":["helpers.ts","stateStorage.ts","components/TodoItemEditor.tsx","components/TodoItem.tsx","components/TodoNewItem.tsx","components/TodoItemMenu.tsx","components/TodoList.tsx","components/App.tsx","index.tsx"],"names":["pickTodoItemFields","obj","pick","todoActions","add","createAction","title","description","toggle","remove","clear","edit","id","createReducer","items","state","payload","cuid","slug","done","rest","omit","omitBy","item","todoSelectors","Object","keys","Set","values","filter","map","styles","createStyles","form","display","flexDirection","width","buttons","justifyContent","TodoItemEditor","props","initialTitle","initialDescription","handleInputChange","evt","target","name","value","setState","handleApplyClick","onApply","handleKeyDown","key","onCancel","this","classes","okButton","IconButton","color","onClick","disabled","className","TextField","label","multiline","autoFocus","error","onKeyDown","onChange","Tooltip","open","placement","Cancel","Component","withStyles","getTodo","useStyles","makeStyles","_theme","itemTitle","todo","textDecoration","connect","selected","edited","onMoreClick","onEditorApply","onEditorCancel","ListItem","divider","ListItemIcon","Checkbox","disableRipple","checkedIcon","icon","checked","ListItemText","primary","primaryTypographyProps","noWrap","secondary","ListItemSecondaryAction","MoreVert","fontSize","TodoNewItem","editorOpened","onNewItemClick","Add","enterDelay","leaveDelay","button","isTodoDone","itemId","disabledEdit","anchorEl","onClickEdit","onClickRemove","onClose","Menu","Boolean","MenuItem","removeTodo","editTodo","addTodo","clearTodos","getTodoIds","getDoneTodoIds","NEW_ITEM","TodoList","clearing","resetActiveItem","menuAnchor","undefined","activeItemId","activeItemStatus","handleNewItemClick","handleNewItemApply","handleNewItemCancel","handleEditorApply","handleEditorCancel","handleMoreClick","currentTarget","handleClickEdit","handleClickRemove","handleClear","handleMenuClose","handleRemoveAnimationDone","handleClearingAnimation","doneTodoIds","delete","size","todoIds","collapseProps","todoId","in","has","onExited","bind","List","Collapse","enter","appear","Button","React","theme","container","marginTop","spacing","App","Container","maxWidth","Typography","variant","component","align","pConfig","storage","pReducer","persistReducer","reducer","demoItems","store","createStore","reduce","dict","composeWithDevTools","persistor","persistStore","ReactDOM","render","loading","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.579564fa.chunk.js","sourcesContent":["import { pick } from 'lodash'\n\nexport interface TodoItemType {\n  id: string\n  title: string\n  description?: string\n  done: boolean\n}\n\nexport type TodoItemFields = Pick<TodoItemType, 'description' | 'title'>\n\nexport const pickTodoItemFields = <T extends Partial<TodoItemFields>>(obj: T) => {\n  return pick(obj, ['description', 'title'])\n}\n","import { DeepReadonly } from 'utility-types'\nimport { createAction, createReducer, ActionType } from 'typesafe-actions'\nimport cuid from 'cuid'\nimport { omit, omitBy } from 'lodash'\n\nimport { TodoItemType, pickTodoItemFields } from 'helpers'\n\nexport type State = DeepReadonly<{\n  items: Record<string, TodoItemType>\n}>\n\nconst defaultState: State = {\n  items: {}\n}\n\nexport const todoActions = {\n  add: createAction('ITEM/ADD', (title: string, description?: string) =>\n    description\n      ? {\n          title,\n          description\n        }\n      : { title }\n  )(),\n  toggle: createAction('ITEM/TOGGLE')<string>(),\n  remove: createAction('ITEM/REMOVE')<string>(),\n  clear: createAction('ITEM/CLEAR')(),\n  edit: createAction('ITEM/EDIT', (id: string, title: string, description?: string) =>\n    description\n      ? {\n          id,\n          title,\n          description\n        }\n      : { id, title }\n  )()\n}\n\nexport type RootAction = ActionType<typeof todoActions>\n\nexport default createReducer<State, RootAction>(defaultState, {\n  'ITEM/ADD': (state, { payload }) => {\n    const id = 'item_' + cuid.slug()\n\n    return {\n      ...state,\n      items: {\n        ...state.items,\n        [id]: {\n          id,\n          ...pickTodoItemFields(payload),\n          done: false\n        }\n      }\n    }\n  },\n\n  'ITEM/EDIT': (state, { payload: { id, ...rest } }) => ({\n    ...state,\n    items: {\n      ...state.items,\n      [id]: {\n        ...state.items[id],\n        ...pickTodoItemFields(rest)\n      }\n    }\n  }),\n\n  'ITEM/TOGGLE': (state, { payload: id }) => ({\n    ...state,\n    items: {\n      ...state.items,\n      [id]: {\n        ...state.items[id],\n        done: !state.items[id].done\n      }\n    }\n  }),\n\n  'ITEM/REMOVE': (state, { payload: id }) => ({\n    ...state,\n    items: omit(state.items, id)\n  }),\n\n  'ITEM/CLEAR': state => ({\n    ...state,\n    items: omitBy(state.items, item => item.done)\n  })\n})\n\nconst getTodoIds = (state: State) => {\n  return Object.keys(state.items)\n}\n\nconst getDoneTodoIds = (state: State) => {\n  return new Set(\n    Object.values(state.items)\n      .filter(item => item.done)\n      .map(({ id }) => id)\n  )\n}\n\nconst getTodo = (state: State, { id }: { id: string }) => {\n  return state.items[id]\n}\n\nconst isTodoDone = (state: State, { id }: { id?: string }) => {\n  return id ? state.items[id].done : false\n}\n\nexport const todoSelectors = {\n  getTodoIds,\n  getDoneTodoIds,\n  getTodo,\n  isTodoDone\n}\n","import { Component, ChangeEvent, KeyboardEvent } from 'react'\nimport { IconButton, TextField, Tooltip } from '@material-ui/core'\nimport { Cancel } from '@material-ui/icons'\nimport { CheckCircleOutline } from 'mdi-material-ui'\nimport { createStyles, withStyles, WithStyles } from '@material-ui/core'\n\nimport { TodoItemFields } from 'helpers'\n\nconst styles = createStyles({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%'\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n})\n\ninterface TodoItemEditorProps {\n  initialTitle: string\n  initialDescription?: string\n  onApply: (title: string, description?: string) => void\n  onCancel: () => void\n}\n\nclass TodoItemEditor extends Component<TodoItemEditorProps & WithStyles<typeof styles>, TodoItemFields> {\n  state: TodoItemFields = {\n    title: this.props.initialTitle,\n    description: this.props.initialDescription\n  }\n\n  handleInputChange = (evt: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = evt.target\n\n    this.setState(state => ({\n      ...state,\n      [name]: value\n    }))\n  }\n\n  handleApplyClick = () => {\n    const { title, description } = this.state\n    this.props.onApply(title, description)\n  }\n\n  handleKeyDown = (evt: KeyboardEvent) => {\n    if (evt.key === 'Enter') {\n      this.handleApplyClick()\n    } else if (evt.key === 'Escape') {\n      this.props.onCancel()\n    }\n  }\n\n  render() {\n    const { title, description } = this.state\n    const { classes, onCancel } = this.props\n    const okButton = (\n      <IconButton color=\"primary\" onClick={this.handleApplyClick} disabled={!title}>\n        <CheckCircleOutline />\n      </IconButton>\n    )\n\n    return (\n      <div className={classes.form}>\n        <TextField\n          name=\"title\"\n          label=\"Title\"\n          multiline\n          autoFocus\n          error={!title}\n          value={title}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleInputChange}\n        />\n        <TextField\n          name=\"description\"\n          label=\"Description\"\n          multiline\n          value={description}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleInputChange}\n        />\n        <div className={classes.buttons}>\n          <Tooltip title=\"Item title cannot be empty\" open={!title}>\n            <span>{title ? <Tooltip title=\"Enter\">{okButton}</Tooltip> : okButton}</span>\n          </Tooltip>\n          <Tooltip title=\"Escape\" placement=\"right\">\n            <IconButton color=\"secondary\" onClick={onCancel}>\n              <Cancel />\n            </IconButton>\n          </Tooltip>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(TodoItemEditor)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport {\n  ListItem,\n  Checkbox,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  makeStyles\n} from '@material-ui/core'\nimport { MoreVert } from '@material-ui/icons'\nimport { CheckCircleOutline, CheckboxBlankCircleOutline } from 'mdi-material-ui'\n\nimport TodoItemEditor from './TodoItemEditor'\nimport { todoSelectors, todoActions, State } from 'stateStorage'\nimport { TodoItemType } from 'helpers'\n\nconst { getTodo } = todoSelectors\nconst { toggle } = todoActions\n\ninterface StateProps {\n  todo: TodoItemType\n}\n\ninterface OwnProps {\n  id: string\n  selected: boolean\n  edited: boolean\n  disabled: boolean\n  onMoreClick: (evt: React.MouseEvent<HTMLButtonElement>) => void\n  onEditorApply: (title: string, description?: string) => void\n  onEditorCancel: () => void\n}\n\ninterface DispatchProps {\n  toggle: typeof toggle\n}\n\ntype TodoItemProps = OwnProps & StateProps & DispatchProps\n\nconst useStyles = makeStyles(_theme => ({\n  itemTitle: ({ todo }: TodoItemProps) =>\n    todo.done\n      ? {\n          textDecoration: 'line-through'\n        }\n      : {}\n}))\n\nconst TodoItem: React.FC<TodoItemProps> = props => {\n  const {\n    id,\n    selected,\n    edited,\n    disabled,\n    onMoreClick,\n    onEditorApply,\n    onEditorCancel,\n    todo: { title, description, done },\n    toggle\n  } = props\n\n  const styles = useStyles(props)\n\n  const handleItemCheck = () => {\n    toggle(id)\n  }\n\n  return (\n    <ListItem divider selected={selected} disabled={disabled || done}>\n      <ListItemIcon>\n        <Checkbox\n          disabled={disabled || selected}\n          color=\"default\"\n          disableRipple\n          checkedIcon={<CheckCircleOutline />}\n          icon={<CheckboxBlankCircleOutline />}\n          onChange={handleItemCheck}\n          checked={done}\n        />\n      </ListItemIcon>\n      {edited ? (\n        <TodoItemEditor\n          initialTitle={title}\n          initialDescription={description}\n          onApply={onEditorApply}\n          onCancel={onEditorCancel}\n        />\n      ) : (\n        <ListItemText\n          classes={{\n            primary: styles.itemTitle\n          }}\n          primary={title}\n          primaryTypographyProps={{\n            noWrap: false\n          }}\n          secondary={description}\n        />\n      )}\n      <ListItemSecondaryAction>\n        <IconButton onClick={onMoreClick} disabled={disabled || edited}>\n          <MoreVert color=\"action\" fontSize=\"inherit\" />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  )\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, State>(\n  (state, props) => ({\n    todo: getTodo(state, props)\n  }),\n  {\n    toggle\n  }\n)(TodoItem)\n","import React from 'react'\nimport { Checkbox, ListItemIcon, ListItem, Tooltip } from '@material-ui/core'\nimport { Add as AddIcon } from '@material-ui/icons'\n\nimport TodoItemEditor from './TodoItemEditor'\n\ninterface TodoNewItemProps {\n  editorOpened: boolean\n  disabled: boolean\n\n  onNewItemClick: () => void\n  onEditorApply: (title: string, description?: string) => void\n  onEditorCancel: () => void\n}\n\nconst TodoNewItem: React.FC<TodoNewItemProps> = ({\n  editorOpened,\n  disabled,\n  onNewItemClick,\n  onEditorApply,\n  onEditorCancel\n}) => {\n  const icon = (\n    <ListItemIcon>\n      <Checkbox disabled color=\"default\" disableRipple icon={<AddIcon />} checked={false} />\n    </ListItemIcon>\n  )\n\n  if (editorOpened) {\n    return (\n      <ListItem divider>\n        {icon}\n        <TodoItemEditor initialTitle={''} onApply={onEditorApply} onCancel={onEditorCancel} />\n      </ListItem>\n    )\n  }\n\n  return (\n    <Tooltip title=\"Click to add new TODO item\" enterDelay={850} leaveDelay={250}>\n      <ListItem button divider disabled={disabled} onClick={onNewItemClick}>\n        {icon}\n      </ListItem>\n    </Tooltip>\n  )\n}\n\nexport default TodoNewItem\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Menu, MenuProps, MenuItem } from '@material-ui/core'\n\nimport { todoSelectors, State } from 'stateStorage'\n\nconst { isTodoDone } = todoSelectors\n\ninterface StateProps {\n  disabledEdit: boolean\n}\n\ninterface OwnProps {\n  itemId?: string\n  anchorEl: MenuProps['anchorEl']\n\n  onClickEdit: () => void\n  onClickRemove: () => void\n  onClose: () => void\n}\n\ntype TodoItemMenuProps = StateProps & OwnProps\n\nconst TodoItemMenu: React.FC<TodoItemMenuProps> = ({\n  itemId,\n  anchorEl,\n  disabledEdit,\n  onClickEdit,\n  onClickRemove,\n  onClose\n}) => {\n  return (\n    <Menu id=\"item-menu\" anchorEl={anchorEl} open={Boolean(itemId && anchorEl)} onClose={onClose}>\n      <MenuItem disabled={disabledEdit} onClick={onClickEdit}>\n        Edit\n      </MenuItem>\n      <MenuItem onClick={onClickRemove}>Remove</MenuItem>\n    </Menu>\n  )\n}\n\nexport default connect<StateProps, {}, OwnProps, State>((state, { itemId: id }) => ({\n  disabledEdit: isTodoDone(state, { id })\n}))(TodoItemMenu)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { List, Collapse, Button } from '@material-ui/core'\n\nimport TodoItem from './TodoItem'\nimport TodoNewItem from './TodoNewItem'\nimport TodoItemMenu from './TodoItemMenu'\nimport { todoActions, todoSelectors, State } from 'stateStorage'\n\nconst { remove: removeTodo, edit: editTodo, add: addTodo, clear: clearTodos } = todoActions\nconst { getTodoIds, getDoneTodoIds } = todoSelectors\n\ninterface StateProps {\n  todoIds: string[]\n  doneTodoIds: Set<string>\n}\n\ninterface DispatchProps {\n  removeTodo: typeof removeTodo\n  editTodo: typeof editTodo\n  addTodo: typeof addTodo\n  clearTodos: typeof clearTodos\n}\n\ntype TodoListProps = StateProps & DispatchProps\n\nconst NEW_ITEM = 'NEW_ITEM'\n\ninterface TodoListState {\n  menuAnchor?: HTMLElement\n  activeItemId?: string\n  activeItemStatus?: 'REMOVE_ANIMATION' | 'EDIT' | 'MENU' | 'ADD'\n  clearing: boolean\n}\n\nclass TodoList extends React.Component<TodoListProps, TodoListState> {\n  state: TodoListState = { clearing: false }\n\n  clearing?: Set<string>\n\n  resetActiveItem = () => {\n    this.setState({\n      menuAnchor: undefined,\n      activeItemId: undefined,\n      activeItemStatus: undefined,\n      clearing: false\n    })\n  }\n\n  //NewItem\n  handleNewItemClick = () => {\n    this.setState(state =>\n      state.activeItemId\n        ? state\n        : {\n            activeItemId: NEW_ITEM,\n            activeItemStatus: 'ADD',\n            clearing: false\n          }\n    )\n  }\n\n  handleNewItemApply = (title: string, description?: string) => {\n    const { addTodo } = this.props\n    addTodo(title, description)\n    this.resetActiveItem()\n  }\n\n  handleNewItemCancel = () => {\n    this.resetActiveItem()\n  }\n\n  //Editor\n  handleEditorApply = (id: string, title: string, description?: string) => {\n    const { editTodo } = this.props\n    editTodo(id, title, description)\n    this.resetActiveItem()\n  }\n\n  handleEditorCancel = () => {\n    this.resetActiveItem()\n  }\n\n  //Menu\n  handleMoreClick = (id: string, evt: React.MouseEvent<HTMLButtonElement>) => {\n    const { currentTarget } = evt\n\n    this.setState(state => ({\n      ...state,\n      menuAnchor: currentTarget,\n      activeItemId: id,\n      activeItemStatus: 'MENU'\n    }))\n  }\n\n  handleClickEdit = () => {\n    this.setState(state =>\n      state.activeItemId\n        ? {\n            ...state,\n            activeItemStatus: 'EDIT'\n          }\n        : state\n    )\n  }\n\n  handleClickRemove = () => {\n    this.setState(state =>\n      state.activeItemId\n        ? {\n            ...state,\n            activeItemStatus: 'REMOVE_ANIMATION'\n          }\n        : state\n    )\n  }\n\n  handleClear = () => {\n    this.setState(state => ({\n      ...state,\n      clearing: true\n    }))\n  }\n\n  handleMenuClose = () => {\n    this.resetActiveItem()\n  }\n\n  handleRemoveAnimationDone = (id: string) => {\n    const { removeTodo } = this.props\n    removeTodo(id)\n    this.resetActiveItem()\n  }\n\n  handleClearingAnimation = (id: string) => {\n    const { clearTodos, doneTodoIds } = this.props\n\n    if (!this.clearing) {\n      this.clearing = new Set(doneTodoIds)\n    }\n\n    this.clearing.delete(id)\n    if (this.clearing.size === 0) {\n      this.clearing = undefined\n      clearTodos()\n      this.setState({ clearing: false })\n    }\n  }\n\n  render() {\n    const { todoIds, doneTodoIds } = this.props\n\n    const { activeItemStatus, activeItemId, menuAnchor, clearing } = this.state\n\n    const collapseProps = clearing\n      ? (todoId: string) => ({\n          in: !(clearing && doneTodoIds.has(todoId)),\n          onExited: this.handleClearingAnimation.bind(null, todoId)\n        })\n      : (todoId: string) => ({\n          in: !(activeItemId === todoId && activeItemStatus === 'REMOVE_ANIMATION'),\n          onExited: this.handleRemoveAnimationDone.bind(null, todoId)\n        })\n\n    return (\n      <>\n        <List>\n          {todoIds.map(todoId => (\n            <Collapse enter={false} appear={false} key={todoId} {...collapseProps(todoId)}>\n              <TodoItem\n                disabled={clearing}\n                selected={todoId === activeItemId}\n                edited={todoId === activeItemId && activeItemStatus === 'EDIT'}\n                id={todoId}\n                onMoreClick={this.handleMoreClick.bind(null, todoId)}\n                onEditorApply={this.handleEditorApply.bind(null, todoId)}\n                onEditorCancel={this.handleEditorCancel}\n              />\n            </Collapse>\n          ))}\n          <TodoNewItem\n            editorOpened={activeItemId === 'NEW_ITEM' && activeItemStatus === 'ADD'}\n            disabled={Boolean(clearing) || Boolean(activeItemId && activeItemId !== 'NEW_ITEM')}\n            onNewItemClick={this.handleNewItemClick}\n            onEditorApply={this.handleNewItemApply}\n            onEditorCancel={this.handleNewItemCancel}\n          />\n        </List>\n        {doneTodoIds.size > 0 && (\n          <Button size=\"small\" onClick={this.handleClear}>\n            Clear done\n          </Button>\n        )}\n        <TodoItemMenu\n          itemId={activeItemStatus === 'MENU' ? activeItemId : undefined}\n          anchorEl={menuAnchor}\n          onClickEdit={this.handleClickEdit}\n          onClickRemove={this.handleClickRemove}\n          onClose={this.handleMenuClose}\n        />\n      </>\n    )\n  }\n}\n\nexport default connect<StateProps, DispatchProps, {}, State>(\n  state => ({\n    todoIds: getTodoIds(state),\n    doneTodoIds: getDoneTodoIds(state)\n  }),\n  {\n    removeTodo,\n    editTodo,\n    addTodo,\n    clearTodos\n  }\n)(TodoList)\n","import React from 'react'\nimport { Container, Typography, makeStyles } from '@material-ui/core'\n\nimport TodoList from './TodoList'\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    marginTop: theme.spacing(4)\n  }\n}))\n\nconst App: React.FC = () => {\n  const styles = useStyles()\n\n  return (\n    <Container maxWidth=\"md\" className={styles.container}>\n      <Typography\n        variant=\"h4\"\n        //@ts-ignore\n        component=\"h1\"\n        align=\"center\"\n      >\n        TODO app\n      </Typography>\n      <TodoList />\n    </Container>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport { createStore, AnyAction, Reducer, Store, CombinedState } from 'redux'\nimport { Provider } from 'react-redux'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { slug } from 'cuid'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport reducer, { State } from 'stateStorage'\nimport App from './components/App'\n//import Dummy from './components/Dummy'\n\nconst pConfig = {\n  key: 'root',\n  storage\n}\n\nconst pReducer = persistReducer(pConfig, reducer)\n\nconst demoItems = [\n  {\n    id: 'item_' + slug(),\n    title: 'Go to doctor',\n    description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Et, pariatur, ullam.',\n    done: false\n  },\n  {\n    id: 'item_' + slug(),\n    title: 'Buy some food for breakfast',\n    description: 'Aliquid at ducimus ipsum quod totam ut vitae voluptatem.',\n    done: false\n  },\n  {\n    id: 'item_' + slug(),\n    title: 'Fix the car',\n    description:\n      'Accusamus autem deleniti dolore dolores, expedita illo inventore ipsam, ' +\n      'ipsum libero maiores necessitatibus nesciunt non obcaecati optio provident reprehenderit vel, veniam voluptatem.',\n    done: false\n  },\n  {\n    id: 'item_' + slug(),\n    title: 'Clean the apartment',\n    done: false\n  }\n]\n\ntype StateFromReducer<T> = T extends Reducer<infer S, any> ? S : never\n\nconst store = createStore(\n  pReducer,\n  {\n    items: demoItems.reduce(\n      (dict, item) => ({\n        ...dict,\n        [item.id]: item\n      }),\n      {}\n    )\n  } as CombinedState<StateFromReducer<typeof pReducer>>,\n  composeWithDevTools()\n)\nconst persistor = persistStore(store as unknown as Store<State, AnyAction>)\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <CssBaseline />\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}