{"version":3,"sources":["helpers.ts","stateStorage.ts","components/TodoItemEditor.tsx","components/TodoItem.tsx","components/TodoNewItem.tsx","components/TodoItemMenu.tsx","components/TodoList.tsx","components/App.tsx","index.tsx"],"names":["pickTodoItemFields","obj","pick","todoActions","add","createAction","title","description","toggle","remove","edit","id","createReducer","items","state","payload","cuid","slug","done","rest","omit","todoSelectors","Object","keys","styles","createStyles","form","display","flexDirection","width","buttons","justifyContent","TodoItemEditor","props","initialTitle","initialDescription","handleInputChange","evt","target","name","value","setState","handleApplyClick","onApply","handleKeyDown","key","onCancel","this","classes","okButton","IconButton","color","onClick","disabled","className","TextField","label","multiline","autoFocus","error","onKeyDown","onChange","Tooltip","open","placement","Cancel","Component","withStyles","getTodo","useStyles","makeStyles","theme","itemTitle","todo","textDecoration","connect","selected","edited","onMoreClick","onEditorApply","onEditorCancel","ListItem","divider","ListItemIcon","Checkbox","disableRipple","checkedIcon","icon","checked","ListItemText","primary","primaryTypographyProps","noWrap","secondary","ListItemSecondaryAction","MoreVert","fontSize","TodoNewItem","editorOpened","onNewItemClick","Add","enterDelay","leaveDelay","button","isTodoDone","itemId","disabledEdit","anchorEl","onClickEdit","onClickRemove","onClose","Menu","Boolean","MenuItem","removeTodo","editTodo","addTodo","getTodoIds","NEW_ITEM","TodoList","resetActiveItem","menuAnchor","undefined","activeItemId","activeItemStatus","handleNewItemClick","handleNewItemApply","handleNewItemCancel","handleEditorApply","handleEditorCancel","handleMoreClick","currentTarget","handleClickEdit","handleClickRemove","handleMenuClose","handleRemoveAnimationDone","todoIds","List","map","todoId","Collapse","enter","appear","in","onExited","bind","React","container","marginTop","spacing","App","Container","maxWidth","Typography","variant","component","align","pConfig","storage","pReducer","persistReducer","reducer","demoItems","store","createStore","reduce","dict","item","composeWithDevTools","persistor","persistStore","ReactDOM","render","loading","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.7716081a.chunk.js","sourcesContent":["import { pick } from 'lodash'\n\nexport interface TodoItemType {\n  id: string\n  title: string\n  description?: string\n  done: boolean\n}\n\nexport type TodoItemFields = Pick<TodoItemType, 'description' | 'title'>\n\nexport const pickTodoItemFields = <T extends Partial<TodoItemFields>>(obj: T) => {\n  return pick(obj, ['description', 'title'])\n}\n","import { DeepReadonly } from 'utility-types'\nimport { createAction, createReducer, ActionType } from 'typesafe-actions'\nimport cuid from 'cuid'\nimport { omit } from 'lodash'\n\nimport { TodoItemType, pickTodoItemFields } from 'helpers'\n\nexport type State = DeepReadonly<{\n  items: Record<string, TodoItemType>\n}>\n\nconst defaultState: State = {\n  items: {}\n}\n\nexport const todoActions = {\n  add: createAction('ITEM/ADD', (title: string, description?: string) =>\n    description\n      ? {\n          title,\n          description\n        }\n      : { title }\n  )(),\n  toggle: createAction('ITEM/TOGGLE')<string>(),\n  remove: createAction('ITEM/REMOVE')<string>(),\n  edit: createAction('ITEM/EDIT', (id: string, title: string, description?: string) =>\n    description\n      ? {\n          id,\n          title,\n          description\n        }\n      : { id, title }\n  )()\n}\n\nexport type RootAction = ActionType<typeof todoActions>\n\nexport default createReducer<State, RootAction>(defaultState, {\n  'ITEM/ADD': (state, { payload }) => {\n    const id = 'item_' + cuid.slug()\n\n    return {\n      ...state,\n      items: {\n        ...state.items,\n        [id]: {\n          id,\n          ...pickTodoItemFields(payload),\n          done: false\n        }\n      }\n    }\n  },\n\n  'ITEM/EDIT': (state, { payload: { id, ...rest } }) => ({\n    ...state,\n    items: {\n      ...state.items,\n      [id]: {\n        ...state.items[id],\n        ...pickTodoItemFields(rest)\n      }\n    }\n  }),\n\n  'ITEM/TOGGLE': (state, { payload: id }) => ({\n    ...state,\n    items: {\n      ...state.items,\n      [id]: {\n        ...state.items[id],\n        done: !state.items[id].done\n      }\n    }\n  }),\n\n  'ITEM/REMOVE': (state, { payload: id }) => ({\n    ...state,\n    items: omit(state.items, id)\n  })\n})\n\nconst getTodoIds = (state: State) => {\n  return Object.keys(state.items)\n}\n\nconst getTodo = (state: State, { id }: { id: string }) => {\n  return state.items[id]\n}\n\nconst isTodoDone = (state: State, { id }: { id?: string }) => {\n  return id ? state.items[id].done : false\n}\n\nexport const todoSelectors = {\n  getTodoIds,\n  getTodo,\n  isTodoDone\n}\n","import React, { Component, ChangeEvent, KeyboardEvent } from 'react'\nimport { IconButton, TextField, Tooltip } from '@material-ui/core'\nimport { Cancel } from '@material-ui/icons'\nimport { CheckCircleOutline } from 'mdi-material-ui'\nimport { createStyles, withStyles, WithStyles } from '@material-ui/core'\n\nimport { TodoItemFields } from 'helpers'\n\nconst styles = createStyles({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%'\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n})\n\ninterface TodoItemEditorProps {\n  initialTitle: string\n  initialDescription?: string\n  onApply: (title: string, description?: string) => void\n  onCancel: () => void\n}\n\nclass TodoItemEditor extends Component<TodoItemEditorProps & WithStyles<typeof styles>, TodoItemFields> {\n  state: TodoItemFields = {\n    title: this.props.initialTitle,\n    description: this.props.initialDescription\n  }\n\n  handleInputChange = (evt: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = evt.target\n\n    this.setState(state => ({\n      ...state,\n      [name]: value\n    }))\n  }\n\n  handleApplyClick = () => {\n    const { title, description } = this.state\n    this.props.onApply(title, description)\n  }\n\n  handleKeyDown = (evt: KeyboardEvent) => {\n    if (evt.key === 'Enter') {\n      this.handleApplyClick()\n    } else if (evt.key === 'Escape') {\n      this.props.onCancel()\n    }\n  }\n\n  render() {\n    const { title, description } = this.state\n    const { classes, onCancel } = this.props\n    const okButton = (\n      <IconButton color=\"primary\" onClick={this.handleApplyClick} disabled={!title}>\n        <CheckCircleOutline />\n      </IconButton>\n    )\n\n    return (\n      <div className={classes.form}>\n        <TextField\n          name=\"title\"\n          label=\"Title\"\n          multiline\n          autoFocus\n          error={!title}\n          value={title}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleInputChange}\n        />\n        <TextField\n          name=\"description\"\n          label=\"Description\"\n          multiline\n          value={description}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleInputChange}\n        />\n        <div className={classes.buttons}>\n          <Tooltip title=\"Item title cannot be empty\" open={!title}>\n            <span>{title ? <Tooltip title=\"Enter\">{okButton}</Tooltip> : okButton}</span>\n          </Tooltip>\n          <Tooltip title=\"Escape\" placement=\"right\">\n            <IconButton color=\"secondary\" onClick={onCancel}>\n              <Cancel />\n            </IconButton>\n          </Tooltip>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(TodoItemEditor)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport {\n  ListItem,\n  Checkbox,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  makeStyles\n} from '@material-ui/core'\nimport { MoreVert } from '@material-ui/icons'\nimport { CheckCircleOutline, CheckboxBlankCircleOutline } from 'mdi-material-ui'\n\nimport TodoItemEditor from './TodoItemEditor'\nimport { todoSelectors, todoActions, State } from 'stateStorage'\nimport { TodoItemType } from 'helpers'\n\nconst { getTodo } = todoSelectors\nconst { toggle } = todoActions\n\ninterface StateProps {\n  todo: TodoItemType\n}\n\ninterface OwnProps {\n  id: string\n  selected: boolean\n  edited: boolean\n  onMoreClick: (evt: React.MouseEvent<HTMLButtonElement>) => void\n  onEditorApply: (title: string, description?: string) => void\n  onEditorCancel: () => void\n}\n\ninterface DispatchProps {\n  toggle: typeof toggle\n}\n\ntype TodoItemProps = OwnProps & StateProps & DispatchProps\n\nconst useStyles = makeStyles(theme => ({\n  itemTitle: ({ todo }: TodoItemProps) =>\n    todo.done\n      ? {\n          textDecoration: 'line-through'\n        }\n      : {}\n}))\n\nconst TodoItem: React.FC<TodoItemProps> = props => {\n  const {\n    id,\n    selected,\n    edited,\n    onMoreClick,\n    onEditorApply,\n    onEditorCancel,\n    todo: { title, description, done },\n    toggle\n  } = props\n\n  const styles = useStyles(props)\n\n  const handleItemCheck = () => {\n    toggle(id)\n  }\n\n  return (\n    <ListItem divider selected={selected} disabled={done}>\n      <ListItemIcon>\n        <Checkbox\n          disabled={selected}\n          color=\"default\"\n          disableRipple\n          checkedIcon={<CheckCircleOutline />}\n          icon={<CheckboxBlankCircleOutline />}\n          onChange={handleItemCheck}\n          checked={done}\n        />\n      </ListItemIcon>\n      {edited ? (\n        <TodoItemEditor\n          initialTitle={title}\n          initialDescription={description}\n          onApply={onEditorApply}\n          onCancel={onEditorCancel}\n        />\n      ) : (\n        <ListItemText\n          classes={{\n            primary: styles.itemTitle\n          }}\n          primary={title}\n          primaryTypographyProps={{\n            noWrap: false\n          }}\n          secondary={description}\n        />\n      )}\n      <ListItemSecondaryAction>\n        <IconButton onClick={onMoreClick} disabled={edited}>\n          <MoreVert color=\"action\" fontSize=\"inherit\" />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  )\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, State>(\n  (state, props) => ({\n    todo: getTodo(state, props)\n  }),\n  {\n    toggle\n  }\n)(TodoItem)\n","import React from 'react'\nimport { Checkbox, ListItemIcon, ListItem, Tooltip } from '@material-ui/core'\nimport { Add as AddIcon } from '@material-ui/icons'\n\nimport TodoItemEditor from './TodoItemEditor'\n\ninterface TodoNewItemProps {\n  editorOpened: boolean\n  disabled: boolean\n\n  onNewItemClick: () => void\n  onEditorApply: (title: string, description?: string) => void\n  onEditorCancel: () => void\n}\n\nconst TodoNewItem: React.FC<TodoNewItemProps> = ({\n  editorOpened,\n  disabled,\n  onNewItemClick,\n  onEditorApply,\n  onEditorCancel\n}) => {\n  const icon = (\n    <ListItemIcon>\n      <Checkbox disabled color=\"default\" disableRipple icon={<AddIcon />} checked={false} />\n    </ListItemIcon>\n  )\n\n  if (editorOpened) {\n    return (\n      <ListItem divider>\n        {icon}\n        <TodoItemEditor initialTitle={''} onApply={onEditorApply} onCancel={onEditorCancel} />\n      </ListItem>\n    )\n  }\n\n  return (\n    <Tooltip title=\"Click to add new TODO item\" enterDelay={850} leaveDelay={250}>\n      <ListItem button divider disabled={disabled} onClick={onNewItemClick}>\n        {icon}\n      </ListItem>\n    </Tooltip>\n  )\n}\n\nexport default TodoNewItem\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Menu, MenuProps, MenuItem } from '@material-ui/core'\n\nimport { todoSelectors, State } from 'stateStorage'\n\nconst { isTodoDone } = todoSelectors\n\ninterface StateProps {\n  disabledEdit: boolean\n}\n\ninterface OwnProps {\n  itemId?: string\n  anchorEl: MenuProps['anchorEl']\n\n  onClickEdit: () => void\n  onClickRemove: () => void\n  onClose: () => void\n}\n\ntype TodoItemMenuProps = StateProps & OwnProps\n\nconst TodoItemMenu: React.FC<TodoItemMenuProps> = ({\n  itemId,\n  anchorEl,\n  disabledEdit,\n  onClickEdit,\n  onClickRemove,\n  onClose\n}) => {\n  return (\n    <Menu id=\"item-menu\" anchorEl={anchorEl} open={Boolean(itemId && anchorEl)} onClose={onClose}>\n      <MenuItem disabled={disabledEdit} onClick={onClickEdit}>\n        Edit\n      </MenuItem>\n      <MenuItem onClick={onClickRemove}>Remove</MenuItem>\n    </Menu>\n  )\n}\n\nexport default connect<StateProps, {}, OwnProps, State>((state, { itemId: id }) => ({\n  disabledEdit: isTodoDone(state, { id })\n}))(TodoItemMenu)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { List, Collapse } from '@material-ui/core'\n\nimport TodoItem from './TodoItem'\nimport TodoNewItem from './TodoNewItem'\nimport TodoItemMenu from './TodoItemMenu'\nimport { todoActions, todoSelectors, State } from 'stateStorage'\n\nconst { remove: removeTodo, edit: editTodo, add: addTodo } = todoActions\nconst { getTodoIds } = todoSelectors\n\ninterface StateProps {\n  todoIds: string[]\n}\n\ninterface DispatchProps {\n  removeTodo: typeof removeTodo\n  editTodo: typeof editTodo\n  addTodo: typeof addTodo\n}\n\ntype TodoListProps = StateProps & DispatchProps\n\nconst NEW_ITEM = 'NEW_ITEM'\n\ninterface TodoListState {\n  menuAnchor?: HTMLElement\n  activeItemId?: string\n  activeItemStatus?: 'REMOVE_ANIMATION' | 'EDIT' | 'MENU' | 'ADD'\n}\n\nclass TodoList extends React.Component<TodoListProps, TodoListState> {\n  state: TodoListState = {}\n\n  resetActiveItem = () => {\n    this.setState({\n      menuAnchor: undefined,\n      activeItemId: undefined,\n      activeItemStatus: undefined\n    })\n  }\n\n  //NewItem\n  handleNewItemClick = () => {\n    this.setState(state =>\n      state.activeItemId\n        ? state\n        : {\n            activeItemId: NEW_ITEM,\n            activeItemStatus: 'ADD'\n          }\n    )\n  }\n\n  handleNewItemApply = (title: string, description?: string) => {\n    const { addTodo } = this.props\n    addTodo(title, description)\n    this.resetActiveItem()\n  }\n\n  handleNewItemCancel = () => {\n    this.resetActiveItem()\n  }\n\n  //Editor\n  handleEditorApply = (id: string, title: string, description?: string) => {\n    const { editTodo } = this.props\n    editTodo(id, title, description)\n    this.resetActiveItem()\n  }\n\n  handleEditorCancel = () => {\n    this.resetActiveItem()\n  }\n\n  //Menu\n  handleMoreClick = (id: string, evt: React.MouseEvent<HTMLButtonElement>) => {\n    const { currentTarget } = evt\n\n    this.setState(state => ({\n      ...state,\n      menuAnchor: currentTarget,\n      activeItemId: id,\n      activeItemStatus: 'MENU'\n    }))\n  }\n\n  handleClickEdit = () => {\n    this.setState(state =>\n      state.activeItemId\n        ? {\n            ...state,\n            activeItemStatus: 'EDIT'\n          }\n        : state\n    )\n  }\n\n  handleClickRemove = () => {\n    this.setState(state =>\n      state.activeItemId\n        ? {\n            ...state,\n            activeItemStatus: 'REMOVE_ANIMATION'\n          }\n        : state\n    )\n  }\n\n  handleMenuClose = () => {\n    this.resetActiveItem()\n  }\n\n  handleRemoveAnimationDone = (id: string) => {\n    const { removeTodo } = this.props\n    removeTodo(id)\n    this.resetActiveItem()\n  }\n\n  render() {\n    const { todoIds } = this.props\n    const { activeItemStatus, activeItemId, menuAnchor } = this.state\n\n    return (\n      <>\n        <List>\n          {todoIds.map(todoId => (\n            <Collapse\n              enter={false}\n              appear={false}\n              key={todoId}\n              in={!(activeItemId === todoId && activeItemStatus === 'REMOVE_ANIMATION')}\n              onExited={this.handleRemoveAnimationDone.bind(null, todoId)}\n            >\n              <TodoItem\n                selected={todoId === activeItemId}\n                edited={todoId === activeItemId && activeItemStatus === 'EDIT'}\n                id={todoId}\n                onMoreClick={this.handleMoreClick.bind(null, todoId)}\n                onEditorApply={this.handleEditorApply.bind(null, todoId)}\n                onEditorCancel={this.handleEditorCancel}\n              />\n            </Collapse>\n          ))}\n          <TodoNewItem\n            editorOpened={activeItemId === 'NEW_ITEM' && activeItemStatus === 'ADD'}\n            disabled={Boolean(activeItemId && activeItemId !== 'NEW_ITEM')}\n            onNewItemClick={this.handleNewItemClick}\n            onEditorApply={this.handleNewItemApply}\n            onEditorCancel={this.handleNewItemCancel}\n          />\n        </List>\n        <TodoItemMenu\n          itemId={activeItemStatus === 'MENU' ? activeItemId : undefined}\n          anchorEl={menuAnchor}\n          onClickEdit={this.handleClickEdit}\n          onClickRemove={this.handleClickRemove}\n          onClose={this.handleMenuClose}\n        />\n      </>\n    )\n  }\n}\n\nexport default connect<StateProps, DispatchProps, {}, State>(\n  state => ({\n    todoIds: getTodoIds(state)\n  }),\n  {\n    removeTodo,\n    editTodo,\n    addTodo\n  }\n)(TodoList)\n","import React from 'react'\nimport { Container, Typography, makeStyles } from '@material-ui/core'\n\nimport TodoList from './TodoList'\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    marginTop: theme.spacing(4)\n  }\n}))\n\nconst App: React.FC = () => {\n  const styles = useStyles()\n\n  return (\n    <Container maxWidth=\"md\" className={styles.container}>\n      <Typography\n        variant=\"h4\"\n        //@ts-ignore\n        component=\"h1\"\n        align=\"center\"\n      >\n        TODO app\n      </Typography>\n      <TodoList />\n    </Container>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore, AnyAction, Store } from 'redux'\nimport { Provider } from 'react-redux'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { slug } from 'cuid'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport reducer, { State } from 'stateStorage'\nimport App from './components/App'\n//import Dummy from './components/Dummy'\n\nconst pConfig = {\n  key: 'root',\n  storage\n}\n\nconst pReducer = persistReducer(pConfig, reducer)\n\nconst demoItems = [\n  {\n    id: 'item_' + slug(),\n    title: 'Go to doctor',\n    description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Et, pariatur, ullam.',\n    done: false\n  },\n  {\n    id: 'item_' + slug(),\n    title: 'Buy some food for breakfast',\n    description: 'Aliquid at ducimus ipsum quod totam ut vitae voluptatem.',\n    done: false\n  },\n  {\n    id: 'item_' + slug(),\n    title: 'Fix the car',\n    description:\n      'Accusamus autem deleniti dolore dolores, expedita illo inventore ipsam, ' +\n      'ipsum libero maiores necessitatibus nesciunt non obcaecati optio provident reprehenderit vel, veniam voluptatem.',\n    done: false\n  },\n  {\n    id: 'item_' + slug(),\n    title: 'Clean the apartment',\n    done: false\n  }\n]\n\nconst store = createStore(\n  pReducer,\n  {\n    items: demoItems.reduce(\n      (dict, item) => ({\n        ...dict,\n        [item.id]: item\n      }),\n      {}\n    )\n  },\n  composeWithDevTools()\n)\nconst persistor = persistStore((store as unknown) as Store<State, AnyAction>)\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <CssBaseline />\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}